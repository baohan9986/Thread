const serial = new p5.WebSerial();
let portButton;
let inData = 0; 
let points = []; 
let targetLength = 1.0; // Fraction of points to show (calculated from inData)
let currentLength = 1.0; // Smooth interpolation toward targetLength
let smoothing = 0.01; // Smoothing factor for interpolation
let currentPath = 1; // Tracks the current path (1-4)
let transitioning = false;
let song; // Variable to store the music
let isPlaying = false; // Track whether the music is currently playing

function preload() {
  // Load your music file
  song = loadSound('Lil Peep type Sad Guitar Melody | Sample Focus.mp3'); // Replace with your music file
}

function keyPressed() {
  if (key === 'f') { 
    let fs = fullscreen(); 
    fullscreen(!fs); 
  }
}

function windowResized() {
  resizeCanvas(windowWidth, windowHeight); 
}
function setup() {
  createCanvas(windowWidth, windowHeight);
  frameRate(1000); // Smooth updates

  // Initialize serial communication
  allSerialStuff();

  addPathPoints(); // Add the first path points
}

function draw() {
  background(255); 
  noFill();
  stroke(255, 0, 0);
  strokeWeight(4);

  // Smoothly interpolate currentLength toward targetLength
  currentLength += (targetLength - currentLength) * smoothing;

  // Handle path transitions
  if (!transitioning && currentLength <= 0.01) { // Trigger transition when fully hidden
    transitioning = true; // Prevent re-triggering during transition

    // Transition logic
    if (currentPath === 1) {
      currentPath = 2;
      points = [];
      addPathPoints2();
      stopMusic(); // Stop music if playing
    } else if (currentPath === 2) {
      currentPath = 3;
      points = [];
      addPathPoints3();
      stopMusic(); // Stop music if playing
    } else if (currentPath === 3) {
      currentPath = 4;
      points = [];
      addPathPoints4();
      playMusic(); // Play music for path 4
    } else if (currentPath === 4) {
      currentPath = 1;
      points = [];
      addPathPoints();
      stopMusic(); // Stop music if playing
    }

    // Reset currentLength to avoid repeated triggers
    currentLength = 0.001; // Slightly above 0 to ensure clean transition
  }

  // Allow new transitions when enough points are drawn
  if (currentLength >= 0.05) {
    transitioning = false; // Enable new transitions
  }

  // Calculate the number of points to show
  let numPointsToShow = floor(points.length * currentLength);

  // Draw the visible points
  beginShape();
  for (let i = points.length - numPointsToShow; i < points.length; i++) {
    if (i >= 0) {
      let pt = points[i];
      vertex(pt.x, pt.y);
    }
  }
  endShape();
}

// Function to play music
function playMusic() {
  if (!isPlaying) {
    song.loop(); // Start looping the song
    isPlaying = true; // Mark music as playing
  }
}

// Function to stop music
function stopMusic() {
  if (isPlaying) {
    song.stop(); // Stop the song
    isPlaying = false; // Mark music as not playing
  }
}

function serialEvent() {
  let inString = serial.readLine();
  if (inString) { 
    inString = inString.trim(); 
    inData = constrain(Number(inString), 0, 1023); 
    targetLength = map(inData, 20, 800, 1.0, 0.0); 
  }
}

function addPathPoints() {
storeBezierPointsEven(1920, 904, 1717.66, 893.4, 1251.79, 927.23, 1080.59, 865.28);
storeBezierPointsEven(1080.59, 865.28, 1037.95, 849.85, 992.38, 820.03, 979.3, 773.5);
storeBezierPointsEven(979.3, 773.5, 960.42, 706.34, 1011.23, 636.11, 1050.69, 586.47);
storeBezierPointsEven(1050.69, 586.47, 1092.51, 533.86, 1143.89, 488.33, 1203.42, 456.72);
storeBezierPointsEven(1203.42, 456.72, 1218.29, 448.82, 1237.2, 442, 1251.05, 451.58);
storeBezierPointsEven(1251.05, 451.58, 1167.95, 452.37, 1086.02, 492.75, 1033.75, 557.36);
storeBezierPointsEven(1033.75, 557.36, 1023.29, 516.14, 1016.63, 468.74, 1041.48, 434.23);
storeBezierPointsEven(1041.48, 434.23, 1073.02, 390.42, 1138.46, 389.34, 1187.38, 391.99);
storeBezierPointsEven(1187.38, 391.99, 1251.93, 395.48, 1314.98, 417.51, 1369.07, 452.53);
storeBezierPointsEven(1369.07, 452.53, 1375.36, 456.6, 1382.37, 463.66, 1379.03, 470.36);
storeBezierPointsEven(1379.03, 470.36, 1377.7, 473.02, 1375.03, 474.69, 1372.49, 476.23);
storeBezierPointsEven(1372.49, 476.23, 1309.4, 514.64, 1251.61, 561.76, 1201.29, 615.83);
storeBezierPointsEven(1201.29, 615.83, 1188.18, 629.92, 1175.4, 644.62, 1159.55, 655.53);
storeBezierPointsEven(1159.55, 655.53, 1143.71, 666.44, 1124.71, 673.52, 1105.83, 669.79);
storeBezierPointsEven(1105.83, 669.79, 1083.98, 665.47, 1067.23, 648.13, 1053.59, 630.52);
storeBezierPointsEven(1053.59, 630.52, 1014.69, 580.33, 988.86, 521.49, 963.42, 463.31);
storeBezierPointsEven(963.42, 463.31, 938.06, 467.6, 911.91, 455.24, 894.59, 436.23);
storeBezierPointsEven(894.59, 436.23, 877.27, 417.22, 867.66, 392.4, 861.5, 367.43);
storeBezierPointsEven(861.5, 367.43, 851.67, 327.61, 849.73, 286.16, 852.02, 245.2);
storeBezierPointsEven(852.02, 245.2, 853.31, 221.77, 856.15, 197.78, 867.07, 177.01);
storeBezierPointsEven(867.07, 177.01, 916.49, 195.3, 965.28, 221.94, 995.06, 265.41);
storeBezierPointsEven(995.06, 265.41, 1024.85, 308.88, 1030.27, 372.31, 996.15, 412.47);
storeBezierPointsEven(996.15, 412.47, 988.87, 360.05, 963.38, 310.28, 925.06, 273.71);
storeBezierPointsEven(925.06, 273.71, 920.9, 278.3, 923.62, 285.54, 926.43, 291.05);
storeBezierPointsEven(926.43, 291.05, 980.29, 396.58, 1031.37, 537.36, 973.6, 651.62);
storeBezierPointsEven(973.6, 651.62, 968.72, 661.28, 962.98, 670.45, 956.73, 679.28);
storeBezierPointsEven(956.73, 679.28, 924.67, 719.53, 877.71, 776.97, 820.91, 777.25);
storeBezierPointsEven(820.91, 777.25, 788.9, 777.41, 764.06, 755.27, 745.87, 731.1);
storeBezierPointsEven(745.87, 731.1, 698.51, 668.17, 679.55, 588.99, 639.21, 522.03);
storeBezierPointsEven(639.21, 522.03, 626.99, 501.75, 610.79, 477.87, 586.72, 470.89);
storeBezierPointsEven(586.72, 470.89, 583.21, 469.87, 604.15, 447.33, 606.08, 445.95);
storeBezierPointsEven(606.08, 445.95, 617.17, 438.02, 630.51, 433.43, 643.66, 430.29);
storeBezierPointsEven(643.66, 430.29, 675.53, 422.68, 710.25, 423.45, 742.68, 426.58);
storeBezierPointsEven(742.68, 426.58, 812.22, 433.3, 879.86, 459.73, 935.19, 502.45);
storeBezierPointsEven(935.19, 502.45, 988.93, 543.94, 975.29, 611.16, 934.8, 656.09);
storeBezierPointsEven(934.8, 656.09, 890.76, 579.08, 807.11, 487.93, 709.92, 489.48);
storeBezierPointsEven(709.92, 489.48, 731.41, 489.14, 760.91, 506.9, 779.04, 517.11);
storeBezierPointsEven(779.04, 517.11, 799.16, 528.43, 818.02, 542.05, 835.31, 557.34);
storeBezierPointsEven(835.31, 557.34, 888.79, 604.63, 930.75, 670.89, 939.71, 742.64);
storeBezierPointsEven(939.71, 742.64, 944.54, 781.33, 935.95, 822.25, 909.8, 851.86);
storeBezierPointsEven(909.8, 851.86, 882.68, 882.59, 840.54, 895.99, 801.14, 901.61);
}

function addPathPoints2() {
  points.push(createVector(220.37, 705.44)); 
  storeBezierPointsEven(220.37, 705.44, 296.85, 711.68, 400.4, 496.13, 330.09, 438.45);
  storeBezierPointsEven(330.09, 438.45, 292.37, 399.23, 292.68, 326.43, 286.22, 286.05);
  storeBezierPointsEven(286.22, 286.05, 253.64, 213.62, 143.76, 201.11, 104.2, 284.39);
  storeBezierPointsEven(104.2, 284.39, 63.02, 465.8, 153.51, 398.64, 252.59, 424.57);
  storeBezierPointsEven(252.59, 424.57, 290.31, 481.28, 366.4, 459.81, 334.44, 387.32);
  storeBezierPointsEven(334.44, 387.32, 341.05, 401.05, 349.91, 425.21, 356.88, 441.39);
  storeBezierPointsEven(356.88, 441.39, 361.08, 448.81, 362.63, 461.71, 368.29, 464.73);
  storeBezierPointsEven(368.29, 464.73, 374.8, 408.59, 403.53, 328.77, 396.64, 270.98);
  storeBezierPointsEven(396.64, 270.98, 392.59, 288.4, 387.31, 336.39, 377.13, 367.69);
  storeBezierPointsEven(377.13, 367.69, 338.6, 445.73, 377.38, 259.12, 253.09, 309.34);
  storeBezierPointsEven(253.09, 309.34, 198.35, 280.67, 226.54, 169.44, 280.4, 136.73);
  storeBezierPointsEven(280.4, 136.73, 312.86, 114.54, 343.05, 149.79, 373.63, 157.03);
  storeBezierPointsEven(373.63, 157.03, 388.9, 159.54, 417.07, 154.72, 426.8, 143.64);
  storeBezierPointsEven(426.8, 143.64, 555.46, 22.57, 535.93, 252.8, 659.2, 228.78);
  storeBezierPointsEven(659.2, 228.78, 744.47, 234.17, 774.57, 406.68, 669.9, 384.43);
  storeBezierPointsEven(669.9, 384.43, 647.83, 383, 630.02, 360.62, 608.74, 375.5);
  storeBezierPointsEven(608.74, 375.5, 591.42, 387.22, 588.39, 410.04, 580.43, 427.41);
  storeBezierPointsEven(580.43, 427.41, 562.09, 458.79, 522.45, 425.61, 495.43, 399.89);
  storeBezierPointsEven(495.43, 399.89, 472.5, 382.45, 452.34, 417.57, 433.41, 426.36);
  storeBezierPointsEven(433.41, 426.36, 403.66, 435.84, 412.7, 396.85, 423.95, 382.44);
  storeBezierPointsEven(423.95, 382.44, 433.19, 366.87, 424.48, 368.15, 414.91, 379.42);
  storeBezierPointsEven(414.91, 379.42, 391.09, 407.98, 389.8, 449.95, 394.34, 485.2);
  storeBezierPointsEven(394.34, 485.2, 433.98, 793.43, 593.41, 690.64, 801.51, 705.51);
}

function addPathPoints3() {
points.push(createVector(340.35, 688.71)); 
  storeBezierPointsEven(340.35, 688.71, 303.37, 703.47, 49.95, 672.76, 101.22, 649.08);
  storeBezierPointsEven(101.22, 649.08, 268.47, 571.83, 384.35, 400.25, 436.9, 270.17);
  storeBezierPointsEven(436.9, 270.17, 476.63, 196.91, 590.58, 272.75, 606.29, 332.08);
  storeBezierPointsEven(606.29, 332.08, 606.29, 340.4, 592.19, 325.54, 583.96, 318.76);
  storeBezierPointsEven(583.96, 318.76, 560.18, 298.03, 525.42, 275.18, 494.05, 270.86);
  storeBezierPointsEven(494.05, 270.86, 473, 267.67, 458.62, 281.78, 449.59, 299.47);
  storeBezierPointsEven(449.59, 299.47, 414.96, 371.76, 365.66, 448.97, 315.29, 513.92);
  storeBezierPointsEven(315.29, 513.92, 294.3, 549.37, 157.66, 680.65, 301.4, 598.03);
  storeBezierPointsEven(301.4, 598.03, 331.27, 580.86, 383.35, 557.73, 417.61, 528.84);
  storeBezierPointsEven(417.61, 528.84, 462.22, 491.22, 488.76, 462.21, 519.57, 411.81);
  storeBezierPointsEven(519.57, 411.81, 564.02, 335.82, 494.61, 270.52, 443.41, 347.39);
  storeBezierPointsEven(443.41, 347.39, 260.49, 622.05, 268.58, 612.43, 481.53, 363.68);
  storeBezierPointsEven(481.53, 363.68, 496.34, 346.38, 514.05, 338.04, 534.74, 348.27);
  storeBezierPointsEven(534.74, 348.27, 563.13, 359.71, 608.9, 374.47, 567.11, 403.17);
  storeBezierPointsEven(567.11, 403.17, 443.36, 508.91, 588.76, 446.06, 652.7, 502.28);
  storeBezierPointsEven(652.7, 502.28, 593.51, 505.33, 464.5, 552.8, 422.03, 615.57);
  storeBezierPointsEven(422.03, 615.57, 404.14, 631.48, 338.31, 730.22, 390.33, 688.36);
  storeBezierPointsEven(390.33, 688.36, 529.17, 518.09, 470.41, 817.92, 800.24, 734.79);
}


function addPathPoints4() {
  points.push(createVector(647.27, 129.46)); // Starting point
  storeBezierPointsEven(647.27, 129.46, 612.98, 167.91, 301.81, 512.37, 268.31, 550.65);
  storeBezierPointsEven(268.31, 550.65, 267.78, 553.84, 274.56, 558.36, 278.13, 561.54);
  storeBezierPointsEven(278.13, 561.54, 289.79, 572.15, 354.99, 619.51, 329.85, 633.44);
  storeBezierPointsEven(329.85, 633.44, 320.44, 634.44, 287.01, 601.64, 279.67, 596.45);
  storeBezierPointsEven(279.67, 596.45, 263.75, 583.35, 242.39, 566.56, 227.61, 554.14);
  storeBezierPointsEven(227.61, 554.14, 212.89, 543.79, 234.39, 535.43, 243.84, 529.49);
  storeBezierPointsEven(243.84, 529.49, 271.62, 510.15, 313.48, 547.71, 289.09, 575.08);
  storeBezierPointsEven(289.09, 575.08, 272.52, 595.06, 256.4, 616.54, 238.42, 635.23);
  storeBezierPointsEven(238.42, 635.23, 149.03, 704.71, 73.05, 552.52, 154.07, 492.09);
  storeBezierPointsEven(154.07, 492.09, 218.66, 440.21, 272.7, 437.93, 309.24, 352.16);
  storeBezierPointsEven(309.24, 352.16, 334.37, 317.2, 375.98, 326.34, 407.77, 346.42);
  storeBezierPointsEven(407.77, 346.42, 411.93, 348.75, 413.63, 348.18, 416.49, 345.39);
  storeBezierPointsEven(416.49, 345.39, 444.84, 316.76, 638.14, 121.12, 666.68, 92.28);
  storeBezierPointsEven(666.68, 92.28, 675.71, 83.17, 711.06, 118.05, 706.13, 122.79);
  storeBezierPointsEven(706.13, 122.79, 701.17, 126.41, 693.75, 128.24, 689.21, 133);
  storeBezierPointsEven(689.21, 133, 678.74, 142.14, 687.38, 159.13, 693.98, 150.81);
  storeBezierPointsEven(693.98, 150.81, 692.01, 141.32, 675.71, 142.07, 668.58, 147.33);
  storeBezierPointsEven(668.58, 147.33, 657.81, 152.75, 653.04, 172.49, 664.75, 179.03);
  storeBezierPointsEven(664.75, 179.03, 671.81, 182.48, 677.95, 176.47, 671.41, 170.36);
  storeBezierPointsEven(671.41, 170.36, 666.42, 165.52, 657.69, 162.49, 650.6, 161.65);
  storeBezierPointsEven(650.6, 161.65, 643.08, 160.15, 640.51, 166.32, 635.89, 171.29);
  storeBezierPointsEven(635.89, 171.29, 582.26, 233.99, 436.95, 403.96, 407.5, 438.39);
  storeBezierPointsEven(407.5, 438.39, 394.19, 448.01, 377.57, 415.9, 356.38, 429.62);
  storeBezierPointsEven(356.38, 429.62, 314.31, 448.12, 334.62, 510.29, 379.05, 498.16);
  storeBezierPointsEven(379.05, 498.16, 399.74, 490.9, 412.44, 469.66, 425.94, 453.68);
  storeBezierPointsEven(425.94, 453.68, 428.77, 448.75, 446.21, 420.13, 467.56, 397.67);
  storeBezierPointsEven(467.56, 397.67, 477.4, 387.31, 495.59, 404.1, 502.86, 410.78);
  storeBezierPointsEven(502.86, 410.78, 515.36, 422.26, 523.74, 436.94, 523.4, 454.39);
  storeBezierPointsEven(523.4, 454.39, 523.11, 469.31, 516.63, 483.58, 507.71, 495.53);
  storeBezierPointsEven(507.71, 495.53, 492.05, 516.52, 469.88, 529.53, 451.35, 547.43);
  storeBezierPointsEven(451.35, 547.43, 434.23, 563.97, 423.34, 584.16, 415.75, 606.57);
  storeBezierPointsEven(415.75, 606.57, 399, 655.97, 371.06, 723.09, 308.96, 723.66);
  storeBezierPointsEven(308.96, 723.66, 302.21, 723.72, 286.43, 721.53, 288.83, 732.92);
  storeBezierPointsEven(288.83, 732.92, 289.5, 736.1, 292.41, 738.33, 295.39, 739.63);
  storeBezierPointsEven(295.39, 739.63, 321.7, 751.08, 356.75, 731.42, 379.99, 720.22);
  storeBezierPointsEven(379.99, 720.22, 413.66, 704, 444.05, 682.97, 473.5, 660.11);
  storeBezierPointsEven(473.5, 660.11, 615.84, 549.65, 776.25, 641.63, 801.51, 662.53);
}

function storeBezierPointsEven(x1, y1, cx1, cy1, cx2, cy2, x2, y2) {
  let detail = 200; // Higher value gives smoother curves
  for (let t = 0; t <= 1; t += 1 / detail) {
    let x = bezierPoint(x1, cx1, cx2, x2, t);
    let y = bezierPoint(y1, cy1, cy2, y2, t);
    points.push(createVector(x, y));
  }
}

function allSerialStuff() {
  if (!navigator.serial) {
    alert("WebSerial is not supported in this browser. Try Chrome or MS Edge.");
  }
  serial.getPorts();
  serial.on("noport", makePortButton);
  serial.on("portavailable", openPort);
  serial.on("requesterror", portError);
  serial.on("data", serialEvent);
  serial.on("close", makePortButton);
  navigator.serial.addEventListener("connect", portConnect);
  navigator.serial.addEventListener("disconnect", portDisconnect);
}

function makePortButton() {
  portButton = createButton("Choose Port");
  portButton.position(10, 10);
  portButton.mousePressed(choosePort);
}

function choosePort() {
  if (portButton) portButton.show();
  serial.requestPort();
}

function openPort() {
  serial.open().then(() => {
    console.log("Port Opened");
  });
  if (portButton) portButton.hide();
}

function portError(err) {
  alert("Serial port error: " + err);
}

function portConnect() {
  console.log("Port Connected");
  serial.getPorts();
}

function portDisconnect() {
  serial.close();
  console.log("Port Disconnected");
}
